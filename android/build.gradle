def versions = [
    kotlin: "2.0.21",
    ksp: "2.0.21-1.0.28",
    gradlePlugin: "8.1.4",
    room: "2.6.1",
    coroutines: "1.6.4",
    arrow: "1.2.0",
    testCore: "1.6.1",
    androidxCore: "1.15.0"
]

buildscript {
    ext {
        kotlinVersion = "2.0.21"
        kspVersion = "2.0.21-1.0.28"
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.1.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:${kspVersion}"
    }
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Pedometer_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Pedometer_" + name]).toInteger()
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def reactNativeArchitectures() {
    def value = rootProject.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def supportsNamespace() {
    def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
    def major = parsed[0].toInteger()
    def minor = parsed[1].toInteger()
    return (major == 7 && minor >= 3) || major >= 8
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "com.google.devtools.ksp"

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

android {
    if (supportsNamespace()) {
        namespace "com.pedometer"
        sourceSets {
            main {
                manifest.srcFile "src/main/AndroidManifestNew.xml"
            }
        }
    }

    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation": "$projectDir/schemas".toString(),
                    "room.incremental": "true"
                ]
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable "GradleCompatible"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += ["generated/java", "generated/jni"]
            }
        }
        androidTest {
            assets.srcDirs += files("$projectDir/schemas")
        }
    }

    packagingOptions {
        resources {
            merges += "META-INF/LICENSE.md"
            merges += "META-INF/LICENSE-notice.md"
        }
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // React Native
    implementation "com.facebook.react:react-native:+"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"

    // AndroidX
    implementation "androidx.core:core-ktx:${versions.androidxCore}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    // Arrow
    implementation "io.arrow-kt:arrow-core:${versions.arrow}"
    implementation "io.arrow-kt:arrow-fx-coroutines:${versions.arrow}"

    // Room
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"
    ksp "androidx.room:room-compiler:${versions.room}"

    // Unit test
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.10.3"
    testImplementation "io.mockk:mockk:1.13.5"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    testImplementation "androidx.test:core:${versions.testCore}"
    testImplementation "androidx.test.ext:junit:1.1.5"

    // Instrumentation test
    androidTestImplementation "androidx.test:core:${versions.testCore}"
    androidTestImplementation "androidx.test:core-ktx:${versions.testCore}"
    androidTestImplementation "androidx.test:runner:${versions.testCore}"
    androidTestImplementation "androidx.test:rules:${versions.testCore}"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.room:room-testing:${versions.room}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    androidTestImplementation "io.mockk:mockk-android:1.13.5"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:${versions.kotlin}"
}

if (isNewArchitectureEnabled()) {
    react {
        jsRootDir = file("../src/")
        libraryName = "Pedometer"
        codegenJavaPackageName = "com.pedometer"
    }
}
